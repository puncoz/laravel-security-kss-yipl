FROM ubuntu:18.04

ARG USER_ID=1000
ARG GROUP_ID=985
#RUN userdel -f www-data &&\
#    if getent group www-data ; then groupdel www-data; fi &&\
#    groupadd -g ${GROUP_ID} www-data &&\
#    useradd -l -u ${USER_ID} -g www-data www-data
RUN usermod -u ${USER_ID} www-data &&\
    groupmod -g ${GROUP_ID} www-data

WORKDIR /app

RUN apt update && apt install -y build-essential zlib1g-dev libxml2-dev bzip2 curl libssl-dev pkg-config libcurl4-openssl-dev checkinstall vim netcat iputils-ping wget python cron


COPY ./docker/binaries /tmp/binaries

# Installing apache v2.2.20 that's vulnerable to HttpOnly cookie exposure exploit
# https://www.exploit-db.com/exploits/18442
RUN tar -xjf /tmp/binaries/httpd-2.2.20.tar.bz2 -C /tmp/binaries \
    && cd /tmp/binaries/httpd-2.2.20 \
    && ./configure --prefix=/usr/local/apache2 --enable-mods-shared=all \
    && make \
    && make install

RUN apt install -y libpq-dev

# Building php from source to make it work together with the old apache version
RUN tar -xzf /tmp/binaries/php-7.2.26.tar.gz -C /tmp/binaries \
    && cd /tmp/binaries/php-7.2.26 \
    && ./configure --with-apxs2=/usr/local/apache2/bin/apxs --enable-mbstring --with-pgsql=/usr/local/pgsql --with-pdo-pgsql --with-mysqli --with-pdo-mysql --with-openssl --with-zlib --enable-zip --with-curl \
    && make \
    && make install

#RUN apt install -y libpq-dev php7.2-pgsql
#RUN phpenmod -s apache2 pgsql
#RUN phpenmod -s apache2 pdo_pgsql

RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

COPY ./ /app

# Setting up proper file permissions for the web root
RUN chown -R www-data:www-data /app
RUN find /app -type d -exec chmod 755 {} \;
RUN find /app -type f -exec chmod 644 {} \;
RUN chgrp -R www-data /app/storage /app/bootstrap/cache
RUN chmod -R ug+rwx /app/storage /app/bootstrap/cache

# Setup Laravel scheduler to run as root
RUN echo '* * * * * root cd /app && php artisan schedule:run >> /dev/null 2>&1' >> /etc/crontab

# Overriding default apache2 configuration file
COPY ./docker/httpd.conf /usr/local/apache2/conf

CMD service cron start && /usr/local/apache2/bin/httpd -D FOREGROUND

EXPOSE 80
